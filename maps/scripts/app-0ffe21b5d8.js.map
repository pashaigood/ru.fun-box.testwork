{"version":3,"sources":["scripts/app-0ffe21b5d8.js"],"names":["angular","module","route","restrict","templateUrl","controller","controllerAs","bindToController","directive","RouteController","pointsService","$log","vm","this","points","changeCenter","coords","isArray","get","e","error","center","changePosition","point","geometry","getCoordinates","build","Error","updateAddress","pointSetting","draggable","preset","iconColor","lineSetting","strokeColor","strokeWidth","strokeOpacity","$inject","_","pointFactory","self","lines","type","coordinates","map","getPoint","add","clone","push","remove","service","PointsController","items","newPoint","$event","which","title","isDefined","sortableOptions","containment","orderChanged","$http","Point","data","extend","properties","merge","prototype","value","balloonContentHeader","balloonContentFooter","toCoords","join","then","result","featureMember","status","response","GeoObjectCollection","length","balloonContentBody","GeoObject","name","toFixed","factory","MainController","runBlock","debug","run","constant","config","$logProvider","debugEnabled","$templateCache","put"],"mappings":"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","file":"scripts/app-0ffe21b5d8.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('ruFunBoxTestwork', [\n          'as.sortable',\n          'yaMap'\n      ]);\n\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .directive('route', route);\n\n    /** @ngInject */\n    function route() {\n\n        return {\n            restrict: 'E',\n            templateUrl: 'app/components/route/route.html',\n            controller: 'RouteController',\n            controllerAs: 'route',\n            bindToController: true\n        };\n    }\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .controller('RouteController', RouteController);\n\n    /**\n     * @ngInject\n     * @param pointsService\n     * @constructor\n     */\n    function RouteController(pointsService, $log) {\n        var vm = this;\n\n        /** @property {Object[]} */\n        vm.points = pointsService;\n\n        /**\n         * Обрабатывает событие изменения центра карты.\n         * @method\n         * @param {([Number, Number]|Object)} coords\n         */\n        vm.changeCenter = function (coords) {\n            if (! angular.isArray(coords)) {\n                try {\n                    coords = coords.get('newCenter');\n                }\n                catch (e) {\n                    $log.error(e);\n                    return false;\n                }\n            }\n            pointsService.center = coords;\n        };\n\n        /**\n         * Обрабатывает событие перетаскивания точки на карте.\n         * @method\n         * @param {[Number, Number]} coords\n         * @param {{}} point\n         */\n        vm.changePosition = function (coords, point) {\n            if (! angular.isArray(coords)) {\n                try {\n                    coords = coords.get('target').geometry.getCoordinates();\n                }\n                catch (e) {\n                    $log.error(e);\n                    return false;\n                }\n            }\n\n            if (point) {\n                point.coords(coords);\n                pointsService.build();\n            }\n            else {\n                $log.error(new Error('Point mast be defined.'));\n            }\n        };\n\n        /**\n         * Обновляем адрес на метке.\n         * @param point\n         */\n        vm.updateAddress = function(point) {\n            if (point) {\n                point.updateAddress();\n            }\n        };\n\n\n        /**\n         * Настройки точки на карте.\n         * @type {{draggable: boolean, preset: string, iconColor: string}}\n         */\n        vm.pointSetting = {\n            draggable: true,\n            preset: 'islands#circleIcon',\n            iconColor: '#3caa3c'\n        };\n\n        /**\n         * Настройки линии на карте.\n         * @type {{strokeColor: string, strokeWidth: number, strokeOpacity: number}}\n         */\n        vm.lineSetting = {\n            strokeColor: '#000000',\n            strokeWidth: 4,\n            strokeOpacity: 0.5\n        };\n    }\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .service('pointsService', pointsService);\n\n    /**\n     * Сервис отвечает за управление маршрутом.\n     * @ngInject\n     * @constructor\n     * @param _\n     * @returns {Array}\n     * TODO: Изменить на фабрику, и создать в MainController экземпляр, которым и буду пользоваться компонентом.\n     * TODO: Изменить название с route на points\n     */\n    function pointsService(_, pointFactory) {\n        var self = [];\n\n        /**\n         * Текущий центр маршрута.\n         * @type {number[]}\n         */\n        self.center = [37.63261856079043, 55.75561986082598];\n\n        self.lines = {\n            geometry: {\n                type: 'LineString',\n                coordinates: []\n            }\n        };\n\n        /**\n         * Метод перестраивает маршрут между точками.\n         */\n        self.build = function() {\n            self.lines.geometry.coordinates = _.map(self, function(point) {\n                return point.geometry.coordinates;\n            });\n        };\n\n        /**\n         * @method\n         */\n        self.getPoint = pointFactory;\n\n        /**\n         * Добавляет точку в маршрут.\n         * @param point\n         */\n        self.add = function (point) {\n            point.coords(point.coords() || _.clone(self.center));\n            point.updateAddress();\n            self.push(point);\n            self.build();\n        };\n\n        /**\n         * Удаляет точку из маршрута.\n         * @param point\n         */\n        self.remove = function (point) {\n            _.remove(self, point);\n            self.build();\n        };\n\n        return self;\n    }\n\n\n})();\n\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .directive('points', points);\n\n    /**\n     * @ngInject\n     */\n    function points() {\n        return {\n            restrict: 'E',\n            templateUrl: 'app/components/points/points.html',\n            controller: 'PointsController',\n            controllerAs: 'points',\n            bindToController: true\n        };\n    }\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .controller('PointsController', PointsController);\n\n    /**\n     * Главный контроллер приложения.\n     * @param pointsService\n     * @constructor\n     * @ngInject\n     */\n    function PointsController(pointsService, $log) {\n        var vm = this;\n\n        // TODO: Коодинаты центар карты. Либо из геоданных или центр Москвы.\n        vm.items = pointsService;\n\n\n        /** @property {Object} */\n        vm.newPoint = pointsService.getPoint();\n\n        /**\n         * Добаляет новую точку к списку точек.\n         * @method\n         * @param {Object} [$event] Объект нажатия клавиши.\n         * @param {Number} $event.which\n         */\n        vm.add = function ($event) {\n            if ($event && $event.which != 13 || !vm.newPoint.title()) {\n                return true;\n            }\n            if (angular.isDefined(vm.newPoint.coords()) && !angular.isArray(vm.newPoint.coords())) {\n                $log.error(new Error('Coordinates must to be an array.'));\n                $log.error(vm.newPoint.coords());\n                return false;\n            }\n            pointsService.add(vm.newPoint);\n            vm.newPoint = pointsService.getPoint();\n        };\n\n        /**\n         * Удаляет точку из списка.\n         * @param point\n         */\n        vm.remove = function (point) {\n            pointsService.remove(point);\n        };\n\n        vm.sortableOptions = {\n            containment: '#point-list',\n            orderChanged: function() {\n                pointsService.build();\n            }\n        };\n    }\n})();\n\n(function () {\n    angular\n        .module('ruFunBoxTestwork')\n        .factory('pointFactory', pointFactory);\n\n    /**\n     * Фабрика создаёт новую сущность точки.\n     * @ngInject\n     * @returns {Function}\n     */\n    function pointFactory($http, $log) {\n\n        function Point(data) {\n            data = data || {};\n\n            var self = this;\n\n            angular.extend(self, {\n                geometry: {\n                    type: \"Point\"\n                },\n                properties: {}\n            });\n\n            if (data.title) {\n                self.title(data.title);\n                delete  data.title;\n            }\n\n            if (data.coords) {\n                self.coords(data.coords);\n                self.updateAddress();\n                delete data.coords;\n            }\n            angular.merge(self, data);\n        }\n\n        Point.prototype = {\n\n            /**\n             * Получить|установить заголовок.\n             * @param [value]\n             * @returns {*}\n             */\n            title: function (value) {\n                // Правило, если this не чаще 3 раз\n                // или не используеться в другом контексте, не заменяю на self.\n                return value !== void 0 ?\n                    (this.properties.balloonContentHeader = value)\n                    : this.properties.balloonContentHeader;\n            },\n            /**\n             * Получить|установить координаты.\n             * @param [value]\n             * @returns {*}\n             */\n            coords: function (value) {\n                var self = this;\n                if (value !== void 0) {\n                    self.geometry.coordinates = value;\n                    self.properties.balloonContentFooter = self.toCoords();\n                    return value;\n                }\n                else {\n                    return self.geometry.coordinates;\n                }\n            },\n\n            /**\n             * Метод получает адрес точки\n             * для отображения в балуме.\n             * @return {Promise}\n             */\n            updateAddress: function() {\n\n                var self = this;\n\n                return $http.get('https://geocode-maps.yandex.ru/1.x/?geocode='\n                + self.coords().join(',')\n                + '&format=json')\n                    .then(function (result) {\n                        var featureMember;\n\n                        if (result.status == 200) {\n                            try {\n                                featureMember = result.data.response.GeoObjectCollection.featureMember;\n                            }\n                            catch (e) {\n                                $log.error(e);\n                                return;\n                            }\n\n                            if (featureMember.length) {\n                                self.properties.balloonContentBody = featureMember[0].GeoObject.name;\n                            }\n\n                        }\n                    });\n            },\n\n            /**\n             * Форматирует внешний вид координат.\n             * @method\n             * @returns {string}\n             */\n            toCoords: function () {\n                var coords = this.geometry.coordinates;\n                return coords[0].toFixed(6) + ', ' + coords[1].toFixed(6);\n            }\n        };\n\n        /**\n         * Метод возвращает новую точку маршрута.\n         */\n        return function (data) {\n            return new Point(data);\n        }\n    }\n})();\n(function () {\n    'use strict';\n\n    angular\n        .module('ruFunBoxTestwork')\n        .controller('MainController', MainController);\n\n    /**\n     * Главный контроллер приложения.\n     * @param pointsService\n     * @constructor\n     * @ngInject\n     */\n    function MainController(pointsService) {\n        //var vm = this;\n\n        // Побродим по Ильинскому скверу.\n        pointsService.add(pointsService.getPoint({title: 'Точка 1', coords: [37.6315456771846,55.75716869581239]}));\n        pointsService.add(pointsService.getPoint({title: 'Точка 2', coords: [37.63520507812404,55.753752974261566]}));\n        pointsService.add(pointsService.getPoint({title: 'Точка 3', coords: [37.633488464354116,55.753486748594234]}));\n        pointsService.add(pointsService.getPoint({title: 'Точка 4', coords: [37.630247488020885,55.75655158871031]}));\n\n    }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ruFunBoxTestwork')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n/*global _:false*/\n(function() {\n  'use strict';\n\n  angular\n    .module('ruFunBoxTestwork')\n    .constant('_', _);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('ruFunBoxTestwork')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n  }\n\n})();\n\nangular.module(\"ruFunBoxTestwork\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/components/points/points.html\",\"<div class=\\\"form-group\\\"><input ng-model=\\\"points.newPoint.title\\\" ng-keypress=\\\"points.add($event)\\\" class=\\\"form-control\\\" placeholder=\\\"Точка {{points.items.length+1}}\\\" ng-model-options=\\\"{ getterSetter: true }\\\" type=\\\"text\\\"></div><ul id=\\\"point-list\\\" class=\\\"list-group no-select\\\" as-sortable=\\\"points.sortableOptions\\\" ng-model=\\\"points.items\\\"><li as-sortable-item=\\\"\\\" ng-repeat=\\\"point in points.items\\\" class=\\\"list-group-item\\\"><span as-sortable-item-handle=\\\"\\\" class=\\\"row\\\"><span class=\\\"col-xs-10\\\" ng-bind=\\\"point.title()\\\"></span> <span class=\\\"col-xs-2 text-right\\\"><button class=\\\"btn btn-xs\\\" ng-click=\\\"points.remove(point)\\\"><i class=\\\"glyphicon glyphicon-remove\\\"></i></button></span></span></li></ul><div ng-if=\\\"!points.items.length\\\"><h4 class=\\\"text-center\\\">Список точек пуст</h4></div>\");\n$templateCache.put(\"app/components/route/route.html\",\"<ya-map ya-zoom=\\\"15\\\" ya-center=\\\"{{route.points.center}}\\\" ya-event-boundschange=\\\"route.changeCenter($event)\\\" ya-controls=\\\"searchControl\\\"><ya-geo-object ya-source=\\\"route.points.lines\\\" ya-options=\\\"{{route.lineSetting}}\\\"></ya-geo-object><ya-geo-object ng-repeat=\\\"point in route.points\\\" ya-source=\\\"point\\\" ya-event-geometrychange=\\\"route.changePosition($event, point)\\\" ya-event-dragend=\\\"route.updateAddress(point)\\\" ya-options=\\\"{{route.pointSetting}}\\\"></ya-geo-object></ya-map>\");}]);"],"sourceRoot":"/source/"}